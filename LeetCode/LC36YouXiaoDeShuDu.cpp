#include "head.h"

//请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
//
//数字 1 - 9 在每一行只能出现一次。
//数字 1 - 9 在每一列只能出现一次。
//数字 1 - 9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
//
//注意：
//
//一个有效的数独（部分已被填充）不一定是可解的。
//只需要根据以上规则，验证已经填入的数字是否有效即可。
//空白格用 '.' 表示。
//
//示例 1：
//
//输入：board =
//[["5", "3", ".", ".", "7", ".", ".", ".", "."]
//, ["6", ".", ".", "1", "9", "5", ".", ".", "."]
//, [".", "9", "8", ".", ".", ".", ".", "6", "."]
//, ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
//, ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
//, ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
//, [".", "6", ".", ".", ".", ".", "2", "8", "."]
//, [".", ".", ".", "4", "1", "9", ".", ".", "5"]
//, [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
//输出：true
//示例 2：
//
//输入：board =
//[["8", "3", ".", ".", "7", ".", ".", ".", "."]
//, ["6", ".", ".", "1", "9", "5", ".", ".", "."]
//, [".", "9", "8", ".", ".", ".", ".", "6", "."]
//, ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
//, ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
//, ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
//, [".", "6", ".", ".", ".", ".", "2", "8", "."]
//, [".", ".", ".", "4", "1", "9", ".", ".", "5"]
//, [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
//输出：false
//解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。


class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        //以下表示每一行、每一列、每个3x3方格里1-9是否出现过
        vector<vector<bool>> col(9, vector<bool>(9, false));
        vector<vector<bool>> row(9, vector<bool>(9, false));
        vector<vector<bool>> blocks(9, vector<bool>(9, false));
        for (int i = 0; i < board.size(); ++i)
        {
            for (int j = 0; j < board.size(); ++j)
            {
                if (board[i][j] == '.') continue;
                int blockIndex = 3 * (i / 3) + j / 3;
                int ch = board[i][j] - '0';
                if (row[i][ch] || col[j][ch] || blocks[blockIndex][ch])
                {
                    return false;
                }
                else
                {
                    row[i][ch] = true;
                    col[j][ch] = true;
                    blocks[blockIndex][ch] = true;
                }
            }
        }
        return true;
    }
};